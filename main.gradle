allprojects {
    repositories {
        mavenCentral()
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

        configurations.all {

            resolutionStrategy.eachDependency {
                DependencyResolveDetails details ->
                    if (details.requested.group == "org.springframework") {
                        details.useVersion "${springFrameWorkVersion}"
                    }
            }
        }

        configurations.implementation {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required.set(true)
            xml.destination file("${projectDir}/reports/jacoco.xml")
            csv.required.set(false)
            html.destination file("${projectDir}/reports/jacocoHtml")
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/model/**",
                        "**/dto/**",
                        "**/config/**",
                        "**/*Application.java",
                        "**/*Entity.java",
                        "**/entities/**",
                        "**/test/**",
                        "modular-test/**",
                        "deployment/**"
                ])
            }))
        }
    }

    test {
        useJUnitPlatform()
    }
}

subprojects {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

task jacocoMergedReport(type: JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}
tasks.named('wrapper') {
    gradleVersion = '9.0.0'
}

bootJar {
    manifest {
        attributes 'Start-Class': 'com.devsu.app.MainApplication'
    }
}